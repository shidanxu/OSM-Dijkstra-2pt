// This example creates a custom overlay called USGSOverlay, containing
// a U.S. Geological Survey (USGS) image of the relevant area on the map.

// Set the custom overlay object's prototype to a new instance
// of OverlayView. In effect, this will subclass the overlay class.
// Note that we set the prototype to an instance, rather than the
// parent class itself, because we do not wish to modify the parent class.


var hsv2rgb = function(hue, sat, val) {
  var h = hue, s = sat, v = val;
  var rgb, i, data = [];
  if (s === 0) {
    rgb = [v,v,v];
  } else {
    h = h / 60;
    i = Math.floor(h);
    data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];
    switch(i) {
      case 0:
        rgb = [v, data[2], data[0]];
        break;
      case 1:
        rgb = [data[1], v, data[0]];
        break;
      case 2:
        rgb = [data[0], v, data[2]];
        break;
      case 3:
        rgb = [data[0], data[1], v];
        break;
      case 4:
        rgb = [data[2], data[0], v];
        break;
      default:
        rgb = [v, data[0], data[1]];
        break;
    }
  }
  return '#' + rgb.map(function(x){ 
    return ("0" + Math.round(x*255).toString(16)).slice(-2);
  }).join('');
};


var overlay;
Overlay.prototype = new google.maps.OverlayView();

// Initialize the map and the custom overlay.

function initialize() {
  var mapOptions = {
    zoom: 11,
    center: new google.maps.LatLng(40.4546, -3.7023),
    mapTypeId: google.maps.MapTypeId.SATELLITE
  };

  var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

  south = -3.88026
  west = 40.3293
  north = -3.52434
  east = 40.5799

  var swBound = new google.maps.LatLng(west, south);
  var neBound = new google.maps.LatLng(east, north);
  var bounds = new google.maps.LatLngBounds(swBound, neBound);

  LatArray = [40.3293, 40.3293, 40.3384, 40.3383, 40.3385, 40.3385, 40.3475, 40.3476, 40.3476, 40.3472, 40.3473, 40.3556, 40.3565, 40.3566, 40.3561, 40.3558, 40.3559, 40.3559, 40.356, 40.3564, 40.3565, 40.3556, 40.3561, 40.3562, 40.3563, 40.3563, 40.3567, 40.3567, 40.3654, 40.3657, 40.3654, 40.3655, 40.3657, 40.3646, 40.3658, 40.3649, 40.3649, 40.3652, 40.3653, 40.3655, 40.3656, 40.3643, 40.3647, 40.3643, 40.3647, 40.3648, 40.3644, 40.3645, 40.365, 40.3651, 40.3652, 40.3747, 40.3744, 40.3733, 40.3741, 40.3737, 40.3733, 40.3734, 40.3748, 40.3747, 40.3742, 40.3737, 40.374, 40.3745, 40.3738, 40.3744, 40.3732, 40.3735, 40.3736, 40.3739, 40.374, 40.3746, 40.3746, 40.3742, 40.3743, 40.3824, 40.3824, 40.3823, 40.3829, 40.383, 40.3825, 40.3826, 40.3837, 40.3821, 40.3822, 40.3834, 40.3838, 40.383, 40.3831, 40.3836, 40.3837, 40.3835, 40.3836, 40.3828, 40.3827, 40.3827, 40.3833, 40.3834, 40.3832, 40.3832, 40.3924, 40.3925, 40.3921, 40.3924, 40.3929, 40.3922, 40.3911, 40.3918, 40.392, 40.3926, 40.3926, 40.3918, 40.3923, 40.3923, 40.3916, 40.3917, 40.3928, 40.3914, 40.3915, 40.3927, 40.3927, 40.3929, 40.3919, 40.392, 40.4008, 40.4008, 40.4018, 40.4018, 40.4007, 40.4017, 40.4015, 40.4009, 40.401, 40.4005, 40.4015, 40.4013, 40.4014, 40.4011, 40.4011, 40.4012, 40.4013, 40.4005, 40.4006, 40.4016, 40.4016, 40.4095, 40.4101, 40.4102, 40.4108, 40.4095, 40.4108, 40.41, 40.4101, 40.4103, 40.4103, 40.4098, 40.4098, 40.4099, 40.4106, 40.4107, 40.4104, 40.4105, 40.4109, 40.4109, 40.4105, 40.4106, 40.4096, 40.4097, 40.4195, 40.4195, 40.4189, 40.4188, 40.4193, 40.4194, 40.4196, 40.4197, 40.4189, 40.419, 40.4199, 40.4186, 40.4187, 40.4192, 40.4193, 40.4191, 40.4191, 40.4199, 40.4185, 40.4185, 40.4282, 40.4282, 40.4287, 40.4283, 40.4285, 40.428, 40.4281, 40.4285, 40.4276, 40.4279, 40.4279, 40.4286, 40.4287, 40.4277, 40.4278, 40.4284, 40.4284, 40.4378, 40.4378, 40.4374, 40.4369, 40.4368, 40.4372, 40.4369, 40.437, 40.4377, 40.4377, 40.4371, 40.4372, 40.4375, 40.4373, 40.4374, 40.4366, 40.4367, 40.4376, 40.4376, 40.4459, 40.4462, 40.4458, 40.446, 40.4462, 40.4466, 40.4463, 40.4465, 40.4466, 40.4467, 40.4469, 40.4457, 40.4457, 40.446, 40.4461, 40.4467, 40.4468, 40.4464, 40.4464, 40.4469, 40.4454, 40.4455, 40.4456, 40.4557, 40.456, 40.4552, 40.4549, 40.4556, 40.4545, 40.4551, 40.4552, 40.4558, 40.455, 40.455, 40.4553, 40.4554, 40.4547, 40.4548, 40.4559, 40.4559, 40.4554, 40.4555, 40.4546, 40.4547, 40.4556, 40.4557, 40.4544, 40.4646, 40.4643, 40.4649, 40.4639, 40.4645, 40.4643, 40.4646, 40.4648, 40.4642, 40.464, 40.4649, 40.4635, 40.4638, 40.4636, 40.4644, 40.4645, 40.4647, 40.4648, 40.4633, 40.4634, 40.464, 40.4641, 40.465, 40.4637, 40.4637, 40.4725, 40.4726, 40.473, 40.4739, 40.4736, 40.4724, 40.4724, 40.4727, 40.4728, 40.4733, 40.4738, 40.4738, 40.4739, 40.474, 40.4722, 40.4723, 40.4736, 40.4737, 40.4735, 40.4735, 40.4733, 40.4734, 40.473, 40.4731, 40.4732, 40.4728, 40.4729, 40.4826, 40.4816, 40.4815, 40.4827, 40.4825, 40.4823, 40.4823, 40.4817, 40.4814, 40.4827, 40.4828, 40.4821, 40.4822, 40.4819, 40.482, 40.4821, 40.4824, 40.4825, 40.4829, 40.4828, 40.4829, 40.4818, 40.4818, 40.4814, 40.4919, 40.491, 40.4909, 40.492, 40.4916, 40.4918, 40.4918, 40.4917, 40.4917, 40.4908, 40.4908, 40.4911, 40.4911, 40.4915, 40.4915, 40.4912, 40.4913, 40.4906, 40.4907, 40.4913, 40.4914, 40.4905, 40.4905, 40.5001, 40.5005, 40.4999, 40.5007, 40.5004, 40.5003, 40.4996, 40.5009, 40.5001, 40.5002, 40.5004, 40.5005, 40.4997, 40.4998, 40.4999, 40.5, 40.5006, 40.5007, 40.5008, 40.5009, 40.5094, 40.5099, 40.5092, 40.5086, 40.509, 40.5087, 40.5088, 40.5089, 40.5089, 40.5095, 40.5096, 40.5097, 40.5098, 40.5091, 40.5092, 40.5093, 40.5094, 40.5176, 40.5177, 40.5176, 40.5179, 40.5181, 40.5182, 40.5184, 40.5182, 40.5183, 40.5175, 40.5266, 40.5267, 40.5266, 40.5272, 40.5264, 40.5265, 40.5356, 40.5352, 40.5353, 40.5354, 40.5357, 40.5443, 40.5441, 40.5442, 40.5449, 40.545, 40.5447, 40.5448, 40.5541, 40.5539, 40.554, 40.5531, 40.562, 40.5621, 40.5709, 40.571, 40.5799]
  LonArray = [-3.64156, -3.62979, -3.6181, -3.62988, -3.60633, -3.59456, -3.59464, -3.58286, -3.57109, -3.65351, -3.64174, -3.7478, -3.59472, -3.58294, -3.67715, -3.72425, -3.71247, -3.7007, -3.68892, -3.61827, -3.60649, -3.75958, -3.66537, -3.6536, -3.64182, -3.63004, -3.57116, -3.55939, -3.61835, -3.55946, -3.63013, -3.60657, -3.57124, -3.75968, -3.54769, -3.71257, -3.70079, -3.65368, -3.64191, -3.5948, -3.58302, -3.79501, -3.7479, -3.80679, -3.73612, -3.72435, -3.78323, -3.77145, -3.68902, -3.67724, -3.66546, -3.55954, -3.61843, -3.79511, -3.67733, -3.73622, -3.80689, -3.78334, -3.54776, -3.57132, -3.66555, -3.748, -3.68911, -3.60665, -3.72444, -3.63021, -3.81867, -3.77156, -3.75978, -3.71266, -3.70089, -3.59488, -3.5831, -3.65377, -3.64199, -3.79522, -3.78344, -3.807, -3.71276, -3.70098, -3.77166, -3.75988, -3.55961, -3.83056, -3.81878, -3.61852, -3.54783, -3.6892, -3.67742, -3.58317, -3.57139, -3.60674, -3.59495, -3.72454, -3.7481, -3.73632, -3.64208, -3.6303, -3.66564, -3.65386, -3.6186, -3.60682, -3.67751, -3.63038, -3.53612, -3.66573, -3.83067, -3.73642, -3.68929, -3.59503, -3.58325, -3.72464, -3.65394, -3.64216, -3.75998, -3.7482, -3.5479, -3.78354, -3.77176, -3.57147, -3.55969, -3.52434, -3.71285, -3.70107, -3.73652, -3.72473, -3.55976, -3.54798, -3.7483, -3.57155, -3.61868, -3.71295, -3.70117, -3.78365, -3.6069, -3.64225, -3.63046, -3.68938, -3.6776, -3.66582, -3.65403, -3.77187, -3.76008, -3.59511, -3.58333, -3.78375, -3.67769, -3.6659, -3.55984, -3.77197, -3.54805, -3.70126, -3.68947, -3.65412, -3.64233, -3.73661, -3.72483, -3.71304, -3.58341, -3.57162, -3.63055, -3.61876, -3.53627, -3.52448, -3.60698, -3.59519, -3.76018, -3.7484, -3.61885, -3.60706, -3.72493, -3.73671, -3.64242, -3.63063, -3.59527, -3.58349, -3.71314, -3.70135, -3.52455, -3.76029, -3.7485, -3.66599, -3.65421, -3.68957, -3.67778, -3.53634, -3.78386, -3.77207, -3.66608, -3.67787, -3.57177, -3.65429, -3.60714, -3.70145, -3.68966, -3.61893, -3.76039, -3.72502, -3.71323, -3.59535, -3.58356, -3.7486, -3.73681, -3.6425, -3.63072, -3.54827, -3.56006, -3.6308, -3.72512, -3.73691, -3.66617, -3.71333, -3.70154, -3.58364, -3.57185, -3.68975, -3.67796, -3.61901, -3.65438, -3.64259, -3.76049, -3.7487, -3.60722, -3.59543, -3.72522, -3.66626, -3.73701, -3.71343, -3.67805, -3.6073, -3.65447, -3.61909, -3.59551, -3.58372, -3.54834, -3.76059, -3.7488, -3.70163, -3.68984, -3.57193, -3.56014, -3.64268, -3.63088, -3.53655, -3.79596, -3.78417, -3.77238, -3.572, -3.52483, -3.66635, -3.72531, -3.60738, -3.78428, -3.68993, -3.67814, -3.56021, -3.71352, -3.70173, -3.65456, -3.64276, -3.7489, -3.73711, -3.54842, -3.53662, -3.63097, -3.61918, -3.77248, -3.76069, -3.59559, -3.5838, -3.79607, -3.60746, -3.66644, -3.54849, -3.72541, -3.61926, -3.65464, -3.59567, -3.56028, -3.67823, -3.71362, -3.5367, -3.78438, -3.7372, -3.77259, -3.64285, -3.63105, -3.58387, -3.57208, -3.80797, -3.79618, -3.70182, -3.69003, -3.5249, -3.76079, -3.749, -3.78449, -3.77269, -3.70192, -3.54856, -3.60755, -3.80808, -3.79628, -3.76089, -3.7491, -3.66653, -3.57216, -3.56036, -3.53677, -3.52497, -3.83167, -3.81987, -3.59575, -3.58395, -3.63114, -3.61934, -3.65473, -3.64293, -3.71371, -3.69012, -3.67832, -3.7373, -3.72551, -3.60763, -3.77279, -3.78459, -3.59583, -3.61942, -3.66662, -3.65482, -3.761, -3.79639, -3.58403, -3.57223, -3.69021, -3.67841, -3.7256, -3.71381, -3.70201, -3.64302, -3.63122, -3.53684, -3.56043, -3.54864, -3.7492, -3.7374, -3.80819, -3.54871, -3.7139, -3.7257, -3.53691, -3.60771, -3.57231, -3.56051, -3.59591, -3.58411, -3.7493, -3.7375, -3.7021, -3.6903, -3.63131, -3.61951, -3.6785, -3.6667, -3.7729, -3.7611, -3.65491, -3.64311, -3.79649, -3.7847, -3.7022, -3.61959, -3.7376, -3.58419, -3.65499, -3.66679, -3.773, -3.54878, -3.6904, -3.6786, -3.64319, -3.63139, -3.7612, -3.7494, -3.7258, -3.714, -3.60779, -3.59599, -3.57239, -3.56058, -3.64328, -3.56066, -3.67869, -3.7731, -3.71409, -3.7613, -3.7495, -3.7377, -3.7259, -3.63148, -3.61967, -3.58426, -3.57246, -3.70229, -3.69049, -3.66688, -3.65508, -3.77321, -3.7614, -3.78501, -3.72599, -3.70238, -3.69058, -3.65517, -3.67878, -3.66697, -3.79681, -3.77331, -3.76151, -3.78512, -3.69067, -3.80873, -3.79692, -3.78522, -3.83245, -3.82064, -3.80884, -3.76161, -3.83256, -3.85618, -3.84437, -3.73809, -3.72628, -3.76171, -3.7499, -3.71457, -3.73819, -3.72638, -3.85629, -3.86822, -3.85641, -3.88015, -3.86833, -3.88026]
  CapacityArray = [3.461340963, 11.42255823, 9.470513972, 10.91888475, 8.687810735, 7.959490866, 5.356420209, 12.15732225, 3.218403796, 3.502238825, 30.08864332, 32.51939886, 12.33427815, 5.593965539, 17.7924489, 8.556002632, 10.31151949, 16.77130556, 29.80492285, 24.03683854, 2.571848373, 50.08715386, 10.62638197, 3.829067466, 20.24285954, 20.75392592, 33.56252441, 25.46302337, 9.251553439, 20.71048962, 4.194955103, 38.15619951, 18.71367043, 22.37995114, 12.72547393, 23.80961052, 24.21813898, 25.85604181, 9.274231642, 19.84581839, 33.23194516, 23.30759526, 37.0348603, 16.7352221, 31.91517261, 27.97668194, 21.33285268, 12.54723054, 33.38899367, 23.45243686, 33.6148923, 3.804224981, 21.80907953, 8.338101452, 14.82992019, 24.95533324, 10.67373567, 5.505309864, 9.636930558, 0.0, 11.60974217, 23.37471468, 25.32831428, 24.36729064, 23.97969808, 14.76803496, 1.513490058, 15.79947133, 14.95605408, 19.24371318, 25.97231412, 60.21146511, 0.052069803, 38.32721972, 14.15802013, 8.952301261, 20.26027832, 5.013562247, 26.65935923, 30.87294612, 9.771428677, 19.02917071, 0.333661436, 3.024447486, 8.636954542, 16.37223457, 9.245639955, 46.43374589, 16.10826195, 23.47370504, 0.342977151, 14.32069705, 12.02312178, 23.99367265, 16.78534111, 14.93650643, 29.95491781, 23.09400098, 21.11102819, 29.57862821, 24.5669757, 9.822359121, 42.60132127, 34.90105715, 33.87628376, 25.79929673, 18.30595718, 21.33938818, 27.23678158, 5.750914559, 20.01656671, 20.53409944, 16.93576565, 34.38236786, 18.99376336, 14.04370874, 14.66764978, 8.330563986, 24.90840214, 11.41383612, 15.91019628, 22.47327945, 27.70247647, 52.24131143, 18.34949281, 19.56219053, 8.732939743, 3.581660745, 20.29860316, 42.46287613, 22.69935125, 47.31025197, 36.94316594, 25.40785478, 17.03410996, 19.24603741, 21.17481081, 20.5737354, 20.73618282, 44.5566456, 27.56356462, 16.73597116, 24.72740628, 21.67444377, 14.88907779, 21.53946982, 19.24236189, 45.62864905, 25.17800126, 1.344993938, 18.73186252, 21.65453077, 26.73249581, 25.06497002, 18.78629557, 35.38446755, 32.49941291, 28.2051295, 11.34475792, 12.437428, 20.94285548, 47.05436069, 16.23510443, 19.80321384, 32.41137907, 12.00196608, 6.993519529, 19.3666537, 20.34249236, 23.05157237, 36.62407417, 6.749451601, 16.15173857, 27.47981468, 3.222155169, 4.714972713, 25.48855877, 29.73678035, 15.28309158, 2.436926854, 4.698327272, 33.61141202, 36.82951612, 23.81418383, 27.15919306, 18.07123423, 9.635944833, 1.111893835, 33.82427857, 24.19646549, 13.12825074, 32.74276867, 19.00552409, 27.35907399, 26.54665587, 25.80639767, 1.131228427, 19.61681284, 29.31317372, 21.11125152, 7.657615376, 0.244692441, 14.91848146, 31.23891344, 28.0856296, 13.88972359, 30.84883484, 17.56780758, 24.77718051, 35.3620606, 30.41292172, 24.35902607, 21.27173278, 16.05379592, 10.99420061, 27.59226774, 40.11935906, 19.60184383, 38.10532213, 26.06725529, 1.703056979, 4.551369254, 22.58862566, 25.54845267, 22.47393669, 34.72390131, 31.68576299, 17.53754071, 23.12079953, 27.49500384, 29.97184854, 21.19536646, 33.24518371, 28.78270262, 23.23175036, 14.21791739, 8.927066128, 25.35838988, 26.80639323, 24.84263185, 20.51523174, 24.76206559, 22.28514297, 34.60326603, 15.76779376, 15.56818697, 12.69213672, 14.13913826, 1.441191679, 38.44344845, 13.22572149, 31.59387293, 20.42962257, 29.30353755, 22.55372123, 14.31630022, 18.67880364, 21.69950367, 19.31492087, 14.67739811, 24.80781477, 21.75373971, 10.19525131, 4.454495442, 12.48707942, 22.78316146, 20.28105975, 12.15420563, 12.15937528, 28.83119139, 16.27731004, 20.84629916, 36.4386862, 6.44980654, 17.62917442, 21.67425758, 20.70747, 16.21747564, 2.809486774, 17.12385208, 24.31285888, 5.904445629, 24.44048011, 1.251460055, 30.97374417, 18.40646208, 28.2828059, 33.41431421, 36.70464915, 44.39087942, 40.11482706, 28.83914809, 25.90649942, 2.221731706, 18.6712076, 21.57965982, 17.19409723, 14.5505256, 24.06476987, 6.211221659, 26.87323687, 4.931320553, 4.343558624, 12.69440071, 32.38267099, 30.65150024, 21.03900212, 4.191375688, 5.508977021, 0.821315002, 17.50926685, 22.99588752, 22.91294546, 19.04300545, 28.77043993, 24.49684939, 21.73207047, 20.33207114, 22.6126466, 33.38785297, 32.23926774, 18.88113921, 24.89341749, 30.6036904, 0.754668455, 1.520520751, 34.15004945, 14.28033862, 30.31830098, 18.5622774, 0.922589313, 4.455419031, 37.70211908, 2.786265038, 36.78672672, 36.48670923, 20.47342757, 34.62760327, 27.9322831, 40.80871106, 16.40213179, 2.285561594, 3.434984328, 6.521820211, 15.32961374, 7.945105681, 2.186531455, 8.041371341, 15.59051096, 16.30710945, 0.715461633, 29.39481372, 12.7519217, 8.985647668, 17.38891397, 2.976843686, 4.917749813, 14.79208499, 35.28806726, 19.76862309, 1.333855192, 10.18931129, 11.06812268, 30.2312801, 1.145750723, 3.071974325, 20.57288944, 26.63343226, 0.905159947, 1.016358807, 23.92412999, 13.39628738, 0.843549342, 5.998980306, 24.57980437, 25.13769455, 0.969571512, 8.322596242, 21.15592343, 13.97230215, 37.09403697, 14.39561623, 2.743106364, 0.458117054, 15.21610228, 14.7884921, 16.44196184, 19.00382854, 3.251544382, 3.269532025, 11.56389462, 2.93760304, 15.18626965, 3.181078098, 4.170279992, 0.692563065, 2.907133133, 4.457535408, 2.528524461, 9.761135653, 5.14379358, 2.034254422, 4.081622516, 11.16809302, 29.14410402, 31.53010751, 52.73158706, 9.62634059, 2.483400235, 2.302440818, 0.008546489, 0.593454812, 34.87413573, 29.77370424, 29.22074671, 29.75623916, 0.137185843, 2.222370174, 1.005454032, 2.83706689, 12.7643812, 0.322168816, 1.11118589, 3.179656835, 0.679794355, 1.077273842, 0.955357781, 1.098657322, 0.338253511, 0.0296774, 1.435547018, 0.037430426, 0.900693359, 0.004451776, 1.642321267, 6.119466084, 1.154457964, 0.226603802, 1.330963908, 0.889055135, 0.313404244, 0.426405516, 0.881922658, 1.902866044]

  maxCap = Math.max.apply(null, CapacityArray);
  console.log(maxCap)
  // The custom USGSOverlay object contains the USGS image,
  // the bounds of the image, and a reference to the map.
  var myData = {};

  for (var i = 0; i < LatArray.length; i++){
    west = LatArray[i] - 0.00900930232558/2.0
    east = LatArray[i] + 0.00900930232558/2.0
    north = LonArray[i] + 0.0117897766749/2.0
    south = LonArray[i] - 0.0117897766749/2.0
    capacity = CapacityArray[i]

    var swBound = new google.maps.LatLng(west, south);
    var neBound = new google.maps.LatLng(east, north);
    var bounds = new google.maps.LatLngBounds(swBound, neBound);
    name = "overlay"+i.toString();
    myData.name = new Overlay(bounds, capacity, maxCap, map);
  }
}

/** @constructor */
function Overlay(bounds, val, max, map) {

  // Initialize all properties.
  this.bounds_ = bounds;
  this.val = val;
  this.max = max;
  this.map_ = map;

  // Define a property to hold the image's div. We'll
  // actually create this div upon receipt of the onAdd()
  // method so we'll leave it null for now.
  this.div_ = null;

  // Explicitly call setMap on this overlay.
  this.setMap(map);
}

/**
 * onAdd is called when the map's panes are ready and the overlay has been
 * added to the map.
 */
Overlay.prototype.onAdd = function() {

  var square = document.createElement('div');
  square.className = 'square';

  var h= Math.floor((100 - Math.log(this.val)/Math.log(this.max) * 100) * 120 / 100);
        var s = Math.abs(Math.log(this.val)/Math.log(this.max) * 100 - 50)/50;
        var v = 1;
  square.style.backgroundColor = hsv2rgb(h, s, 1);
  height = 0.009500930232558/ (3.88026 -3.52434) * $(document).height();
  width =  0.0117897766749/3.0/ (40.5799 -40.3293)* $(document).width();

  square.style.height = height +"px";
  square.style.width = width + "px";

  var div = document.createElement('div');
  div.style.borderStyle = 'none';
  div.style.borderWidth = '0px';
  div.style.position = 'absolute';

  // // Create the img element and attach it to the div.
  // var img = document.createElement('img');
  // img.src = this.image_;
  // img.style.width = '100%';
  // img.style.height = '100%';
  // img.style.position = 'absolute';
  div.appendChild(square);

  this.div_ = div;

  // Add the element to the "overlayLayer" pane.
  var panes = this.getPanes();
  panes.overlayLayer.appendChild(div);
};

Overlay.prototype.draw = function() {

  // We use the south-west and north-east
  // coordinates of the overlay to peg it to the correct position and size.
  // To do this, we need to retrieve the projection from the overlay.
  var overlayProjection = this.getProjection();

  // Retrieve the south-west and north-east coordinates of this overlay
  // in LatLngs and convert them to pixel coordinates.
  // We'll use these coordinates to resize the div.
  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

  // Resize the image's div to fit the indicated dimensions.
  var div = this.div_;
  div.style.left = sw.x + 'px';
  div.style.top = ne.y + 'px';
  div.style.width = (ne.x - sw.x) + 'px';
  div.style.height = (sw.y - ne.y) + 'px';
};

// The onRemove() method will be called automatically from the API if
// we ever set the overlay's map property to 'null'.
Overlay.prototype.onRemove = function() {
  this.div_.parentNode.removeChild(this.div_);
  this.div_ = null;
};

google.maps.event.addDomListener(window, 'load', initialize);


